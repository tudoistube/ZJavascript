<!DOCTYPE html>
<html>
<head>
    <script>
        // 생성자 함수를 선언합니다.
        function Rectangle(w, h) {
            var width = w;
            var height = h;

            this.getWidth = function () { return width; };
            this.getHeight = function () { return height; };
            this.setWidth = function (value) {
                if (value < 0) {
                    throw '길이는 음수일 수 없습니다.';
                } else {
                    width = value;
                }
            };
            this.setHeight = function (value) {
                if (value < 0) {
                    throw '길이는 음수일 수 없습니다.';
                } else {
                    height = value;
                }
            };
        }

        //...getWidth(), getHeight(), setWidth(), setHeight()는 getter, setter 이고
        //...실제 메서드는 getArea() 이므로 prototype 에 넣음.
        Rectangle.prototype.getArea = function () {
            return this.getWidth() * this.getHeight();
        };
    </script>
    <script>
        // 생성자 함수를 선언합니다.
        function Square(length) {
            this.base = Rectangle;
            this.base(length, length);
            //...call()메서드는 다른 객체의 메서드를 자신의 메서드처럼 사용할 수 있게 함.
            Rectangle.call(this, length, length);
        }
        Square.prototype = Rectangle.prototype;
/*...★생성자함수 Square 의 프로토타입 constructor() 메서드에 Square 를 다시 넣는 부분은
     없어도 정상적으로 작동함.
     다만, 직접 square 객체의 constructor() 메서드를 출력하면, 생성자함수가 Square 이 아닌
     Rectangle 을 가리키므로, 프로토타입의 생성자 함수를 재정의한 것임. */   
        Square.prototype.constructor = Square;

        // 변수를 선언합니다.
        var rectangle = new Rectangle(5, 7);
        var square = new Square(5);

        // 출력합니다.
        alert(rectangle.getArea() + ' : ' + square.getArea());
        alert(square instanceof Rectangle);
    </script>
</head>
<body>

</body>
</html>
